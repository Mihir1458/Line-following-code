from machine import Pin, PWM
import time

# Motor control pin setup
# Left Motor
AIN1 = Pin(10, Pin.OUT)
AIN2 = Pin(11, Pin.OUT)
PWMA = PWM(Pin(12))
PWMA.freq(1000)

# Right Motor
BIN1 = Pin(13, Pin.OUT)
BIN2 = Pin(14, Pin.OUT)
PWMB = PWM(Pin(15))
PWMB.freq(1000)

# IR Sensor Pins (from left to right)
ir_pins = [Pin(2, Pin.IN), Pin(3, Pin.IN), Pin(4, Pin.IN), Pin(5, Pin.IN), Pin(6, Pin.IN)]

# PID constants (Tune these for your robot)
Kp = 30     # Proportional gain
Ki = 0.0    # Integral gain
Kd = 15     # Derivative gain

# Base motor speed
base_speed = 50000  # Range 0 - 65535 (adjust to your motor spec)

# PID variables
last_error = 0
integral = 0

# Motor control functions
def set_left_motor(speed):
    if speed >= 0:
        AIN1.value(1)
        AIN2.value(0)
    else:
        AIN1.value(0)
        AIN2.value(1)
    PWMA.duty_u16(min(abs(speed), 65535))

def set_right_motor(speed):
    if speed >= 0:
        BIN1.value(1)
        BIN2.value(0)
    else:
        BIN1.value(0)
        BIN2.value(1)
    PWMB.duty_u16(min(abs(speed), 65535))

# Read IR sensor values and return position error
def read_line_position():
    # Assign weights to each sensor from left to right
    weights = [-2, -1, 0, 1, 2]
    values = []

    for pin in ir_pins:
        values.append(1 if pin.value() == 0 else 0)  # 0 means line detected (black)

    total = sum(values)
    if total == 0:
        return None  # Line lost

    position = sum(w * v for w, v in zip(weights, values)) / total
    return position

# Main loop
while True:
    position = read_line_position()

    if position is None:
        # Line lost: Stop or handle it
        set_left_motor(0)
        set_right_motor(0)
        print("Line lost")
        time.sleep(0.05)
        continue

    # PID calculations
    error = position
    integral += error
    derivative = error - last_error
    correction = Kp * error + Ki * integral + Kd * derivative
    last_error = error

    # Adjust motor speeds based on PID correction
    left_speed = base_speed - correction
    right_speed = base_speed + correction

    # Send commands to motors
    set_left_motor(int(left_speed))
    set_right_motor(int(right_speed))

    # Debugging info
    print(f"Pos: {position:.2f}, Error: {error:.2f}, Corr: {correction:.2f}")

    time.sleep(0.01)
